#include <Ethernet.h>
#include <SPI.h>
#include <ArduinoJson.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

#include <Adafruit_GFX.h>   // Core graphics library
#include <MCUFRIEND_kbv.h>  // Hardware-specific library
#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 480
MCUFRIEND_kbv tft;

// Color definitions
#define BLACK 0x0000
#define WHITE 0xFFFF
#define RED 0xF800
#define GREEN 0x07E0
#define BLUE 0x001F
#define YELLOW 0xFFE0

// Network settings
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 105);      // Arduino IP
IPAddress server(192, 168, 1, 3);  // Server IP
int port = 80;                       // HTTP port

EthernetClient client;

const byte ROWS = 4;
const byte COLS = 4;

char keys[ROWS][COLS] = {
  { '1', '4', '7', '*' },
  { '2', '5', '8', '0' },
  { '3', '6', '9', '#' },
  { 'A', 'B', 'C', 'D' }
};
byte rowPins[ROWS] = { 22, 23, 24, 25 };
byte colPins[COLS] = { 26, 27, 28, 29 };
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// LiquidCrystal_I2C tft(0x27, 20, 4);

// to hold category data
struct Category {
  int category_id;
  String category_name;
};
Category categories[3];
int categoryCount = 0;

// to hold product data
struct Product {
  String product_name;
};
Product products[4];
int productCount = 0;

// to hold product size data
struct Size {
  int product_id;
  int size_id;
  String size_name;
};
Size sizes[4];
int sizeCount = 0;

struct Order {
  int product_id;
  String prod_name;
  int size;
  String prod_size;
  int quantity;
};
Order orders[6];
int orderCount = 0;

int product_quantity;

void setup(void) {
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  tft.begin(tft.readID());
  tft.setRotation(0);
  tft.fillScreen(BLACK);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  delay(1000);
}

void loop() {
  // Wait for input to start fetching products
  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Press 'A'");
  tft.setCursor(20, 50);
  tft.print("to start...");
  keyToStart('A');
  orderCount = 0;

  String studentId = studentIdInput();
  while (orderCount < 6) {
    int selectedCategoryIndex = categorySelection();
    Serial.print("selectedCategoryIndex: ");
    Serial.println(selectedCategoryIndex);
    int selectedProductIndex = productSelection(selectedCategoryIndex);
    Serial.print("selectedProductIndex: ");
    Serial.println(selectedProductIndex);
    int selectedSizeIndex = sizeSelection(selectedProductIndex);
    Serial.print("selectedSizeIndex: ");
    Serial.println(selectedSizeIndex);
    int selectedQuantity = quantitySelection(sizes[selectedSizeIndex].product_id);
    Serial.print("selectedQuantity: ");
    Serial.println(selectedQuantity);

    orders[orderCount].product_id = sizes[selectedSizeIndex].product_id;
    orders[orderCount].prod_name = products[selectedProductIndex].product_name;
    orders[orderCount].size = sizes[selectedSizeIndex].size_id;
    orders[orderCount].prod_size = sizes[selectedSizeIndex].size_name;
    orders[orderCount].quantity = selectedQuantity;

    Serial.print("PID: ");
    Serial.println(orders[orderCount].product_id);
    Serial.print("PName: ");
    Serial.println(orders[orderCount].prod_name);
    Serial.print("SID: ");
    Serial.println(orders[orderCount].size);
    Serial.print("SName: ");
    Serial.println(orders[orderCount].prod_size);
    Serial.print("Quan: ");
    Serial.println(orders[orderCount].quantity);

    tft.fillScreen(BLACK);
    tft.setCursor(20, 20);

    tft.print("Press 'A'");

    tft.fillScreen(BLACK);
    tft.setCursor(20, 20);
    tft.print("Item ");
    tft.print(orderCount);
    tft.setCursor(1, 1);
    tft.print(orders[orderCount].prod_name);
    tft.setCursor(1, 2);
    tft.print(orders[orderCount].prod_size);
    tft.setCursor(1, 3);
    tft.print(orders[orderCount].quantity);
    tft.setCursor(3, 3);
    tft.print("pcs.");
    delay(2000);
    orderCount++;

    tft.fillScreen(BLACK);
    tft.setCursor(20, 20);
    tft.print("Add another item?");
    tft.setCursor(20, 50);
    tft.print("'A' = Yes | 'B' = No");

    char key = keypad.getKey();
    while (key != 'A' && key != 'B') {
      key = keypad.getKey();
      delay(100);
    }
    if (key == 'B') break;  // Exit loop if user does not want to add more
  }

  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Saving order...");
  // Send order details to the server
  sendOrderDetails(studentId, orderCount);

  // print order details

  tft.fillScreen(BLACK);
  tft.setCursor(20, 50);
  tft.print("pagod na ako par...");
  delay(1000);
}

void keyToStart(char expectedKey) {
  char key = 0;
  while (key != expectedKey) {
    key = keypad.getKey();
    delay(100);
  }
}

void fetchData(String endpoint, int selectedId) {
  int retries = 3;  // Number of retries for connection
  bool connected = false;

  while (retries > 0 && !connected) {
    if (client.connect(server, port)) {
      connected = true;  // Set the flag if connected
      Serial.println("Connected to server");

      if (endpoint == "/vm-unif/lib/get_products.php") {
        endpoint += "?category_id=" + String(selectedId);
      } else if (endpoint == "/vm-unif/lib/get_sizes.php") {
        String encodedProductName = urlencode(products[selectedId].product_name);
        endpoint += "?product_name=" + encodedProductName;
      } else if (endpoint == "/vm-unif/lib/get_quantities.php") {
        endpoint += "?product_id=" + String(selectedId);
      }

      // Correct the GET request format
      client.print("GET ");
      client.print(endpoint);
      client.println(" HTTP/1.1");
      client.println("Host: 192.168.0.104");
      client.println("User-Agent: Arduino/1.0");
      client.println("Connection: close");
      client.println();
    } else {
      retries--;
      Serial.println("Connection failed, retrying...");
      tft.fillScreen(BLACK);
      tft.setCursor(20, 20);
      tft.print("Connection failed");
      tft.setCursor(20, 50);
      tft.print("Retrying...");
      delay(2000);  // Wait before retrying
    }
  }

  if (!connected) {
    Serial.println("Failed to connect after retries");
    tft.fillScreen(BLACK);
    tft.setCursor(20, 20);
    tft.print("Failed to connect");
    tft.setCursor(20, 50);
    tft.print("Please check the server");
    asm volatile("  jmp 0");
    delay(2000);
  }

  // Wait for server response
  while (client.connected() && !client.available()) {
    delay(10);
  }

  // Read the server response
  String jsonResponse = "";
  bool isBody = false;

  while (client.available()) {
    String line = client.readStringUntil('\n');

    if (line == "\r") {
      isBody = true;
      continue;
    }

    if (isBody) {
      jsonResponse += line;
    }
  }

  client.stop();
  Serial.println("Disconnected from server");
  Serial.println("Raw JSON Response:");
  Serial.println(jsonResponse);

  parseJsonData(jsonResponse, endpoint);
}

void parseJsonData(String jsonResponse, String endpoint) {
  if (jsonResponse.length() == 0) {
    Serial.println("JSON response is empty.");
    return;
  }

  const size_t capacity = JSON_ARRAY_SIZE(24) + 24 * JSON_OBJECT_SIZE(3) + 24 * 50;
  DynamicJsonDocument doc(capacity);
  DeserializationError error = deserializeJson(doc, jsonResponse);

  if (error) {
    Serial.print("Failed to parse JSON: ");
    Serial.println(error.c_str());
    return;
  }

  if (endpoint.startsWith("/vm-unif/lib/get_categories.php")) {
    categoryCount = 0;
    JsonArray categoriesArray = doc.as<JsonArray>();

    for (JsonObject category : categoriesArray) {
      if (categoryCount < 3) {
        categories[categoryCount].category_id = category["category_id"];
        categories[categoryCount].category_name = String(category["category_name"].as<const char*>());
        categoryCount++;
      }
    }
    displayCategories(0);
  } else if (endpoint.startsWith("/vm-unif/lib/get_products.php")) {
    productCount = 0;
    JsonArray productsArray = doc.as<JsonArray>();

    for (JsonObject product : productsArray) {
      if (productCount < 4) {
        // products[productCount].product_id = product["product_id"];
        products[productCount].product_name = String(product["product_name"].as<const char*>());
        productCount++;
      }
    }
    displayProducts(0);
  } else if (endpoint.startsWith("/vm-unif/lib/get_sizes.php")) {
    sizeCount = 0;
    JsonArray sizesArray = doc.as<JsonArray>();

    for (JsonObject size : sizesArray) {
      if (sizeCount < 4) {
        sizes[sizeCount].product_id = size["product_id"];
        sizes[sizeCount].size_id = size["size_id"];
        sizes[sizeCount].size_name = String(size["size_name"].as<const char*>());
        sizeCount++;
      }
    }
    displaySizes(0);
  } else if (endpoint.startsWith("/vm-unif/lib/get_quantities.php")) {
    product_quantity = doc[0]["product_quantity"];
  }
}

String studentIdInput() {
  char key = 0;
  String idString = "";

  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Enter student ID: ");
  tft.setCursor(20, 300);
  tft.print("Press '#' to enter...");

  while (key != '#') {
    key = keypad.getKey();

    // Handle numeric input
    if (key >= '0' && key <= '9') {
      idString += key;
      tft.setCursor(20, 50);
      tft.fillRect(20, 50, 200, 30, BLACK);  // Clear previous input area
      tft.print(idString);
    }
    // Handle backspace
    else if (key == '*') {
      if (idString.length() > 0) {               // Only remove if there's something to remove
        idString.remove(idString.length() - 1);  // Remove last character
        tft.fillRect(20, 50, 200, 30, BLACK);    // Clear previous input area
        tft.setCursor(20, 50);
        tft.print(idString);                     // Print updated string
      }
    }

    delay(100);
  }

  // Proceed if there's valid input
  if (idString.length() > 0) {
    tft.fillScreen(BLACK);
    tft.setCursor(20, 20);
    tft.print("ID: ");
    tft.print(idString);
    tft.setCursor(20, 50);
    tft.print("Press '#' to confirm");

    key = 0;
    while (key != '#') {
      key = keypad.getKey();
      delay(100);
    }

    tft.fillScreen(BLACK);
    tft.setCursor(20, 20);
    tft.print("Your student ID: ");
    tft.setCursor(30, 50);  // Move cursor to the right to avoid overlap
    tft.print(idString);
    delay(1500);

    return idString;
  }
  return "";  // Default to empty if no valid input
}


int categorySelection() {
  fetchData("/vm-unif/lib/get_categories.php", 0);
  return handleCategorySelection();  // Manage category selection with navigation
}

void displayCategories(int startIndex) {
  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Select a category:");

  for (int i = 0; i < min(categoryCount, 3); i++) {
    tft.setCursor(20, 50 + i * 30);
    tft.print(i + 1);
    tft.print(": ");
    tft.print(categories[i].category_name);
  }
}

int handleCategorySelection() {
  char key = 0;
  int startIndex = 0;
  int selectedIndex = -1;
  displayCategories(startIndex);

  while (true) {

    key = keypad.getKey();

    if (key >= '1' && key <= '3') {
      selectedIndex = key - '1';  // Convert to index
      tft.fillScreen(BLACK);
      tft.setCursor(20, 20);
      tft.print("Selected category:");
      tft.setCursor(20, 50);
      tft.print(key);
      tft.print(": ");
      tft.print(categories[key].category_name);
      break;
    } else if (key == 'A') {  // Scroll up
      if (startIndex > 0) {
        startIndex--;
        displayCategories(startIndex);
      }
    } else if (key == 'B') {  // Scroll down
      if (startIndex < categoryCount - 3) {
        startIndex++;
        displayCategories(startIndex);
      }
    }
    delay(100);
  }
  return startIndex + selectedIndex;  // Return the selected category index
}

int productSelection(int categoryIndex) {
  fetchData("/vm-unif/lib/get_products.php", categories[categoryIndex].category_id);
  return handleProductSelection();  // Manage product selection with navigation
}

void displayProducts(int startIndex) {
  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Select a product:");

  for (int i = 0; i < min(productCount, 4); i++) {
    tft.setCursor(20, 50 + i * 30);
    tft.print(i + 1);
    tft.print(": ");
    tft.print(products[i].product_name);
  }
}

int handleProductSelection() {
  char key = 0;
  int startIndex = 0;
  int selectedIndex = -1;
  displayProducts(startIndex);

  while (true) {

    key = keypad.getKey();

    if (key >= '1' && key <= '3') {
      selectedIndex = key - '1';  // Convert to index
      tft.fillScreen(BLACK);
      tft.setCursor(20, 20);
      tft.print("Selected product:");
      tft.setCursor(20, 50);
      tft.print(key);
      tft.print(": ");
      tft.print(products[key].product_name);
      break;
    } else if (key == 'A') {  // Scroll up
      if (startIndex > 0) {
        startIndex--;
        displayProducts(startIndex);
      }
    } else if (key == 'B') {  // Scroll down
      if (startIndex < categoryCount - 3) {
        startIndex++;
        displayProducts(startIndex);
      }
    }
    delay(100);
  }
  return selectedIndex;
}

int sizeSelection(int productIndex) {
  fetchData("/vm-unif/lib/get_sizes.php", productIndex);
  return handleSizeSelection();  // Manage size selection with navigation
}

void displaySizes(int startIndex) {
  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Select a size:");

  for (int i = 0; i < min(sizeCount, 4); i++) {
    tft.setCursor(20, 50 + i * 30);
    tft.print(i + 1);
    tft.print(": ");
    tft.print(sizes[i].size_name);
  }
}

int handleSizeSelection() {
  char key = 0;
  int startIndex = 0;
  int selectedIndex = -1;
  displaySizes(startIndex);

  while (true) {

    key = keypad.getKey();

    if (key >= '1' && key <= '3') {
      selectedIndex = key - '1';  // Convert to index
      tft.fillScreen(BLACK);
      tft.setCursor(20, 20);
      tft.print("Selected size:");
      tft.setCursor(20, 50);
      tft.print(key);
      tft.print(": ");
      tft.print(sizes[key].size_name);
      break;
    } else if (key == 'A') {  // Scroll up
      if (startIndex > 0) {
        startIndex--;
        displaySizes(startIndex);
      }
    } else if (key == 'B') {  // Scroll down
      if (startIndex < categoryCount - 3) {
        startIndex++;
        displaySizes(startIndex);
      }
    }
    delay(100);
  }
  return selectedIndex;
}

int quantitySelection(int productId) {
  fetchData("/vm-unif/lib/get_quantities.php", productId);  // Fetch available quantity
  int availableQuantity = product_quantity;                 // Get available quantity
  return handleQuantitySelection(availableQuantity);        // Pass available quantity to handle function
}

void displayQuantity() {
  tft.fillScreen(BLACK);
  tft.setCursor(20, 20);
  tft.print("Quantity: ");
  tft.setCursor(120, 20);
  tft.print(product_quantity);
}

int handleQuantitySelection(int availableQuantity) {
  int selectedQuantity = 0;
  char key = 0;

  // Initial display
  displayQuantity();
  tft.setCursor(20, 20);
  tft.print("Max: ");
  tft.print(min(availableQuantity, 2));  // Show the lesser of available quantity or 2
  tft.setCursor(20, 50);
  tft.print("Current: ");
  tft.print(selectedQuantity);  // Show current selected quantity
  tft.setCursor(20, 300);
  tft.print("'#' to enter");

  while (true) {
    key = keypad.getKey();

    if (key == '1' && selectedQuantity < min(availableQuantity, 2)) {
      selectedQuantity = 1;
      // Update display only if quantity changes
      tft.setCursor(20, 50);
      tft.print("Current: ");
      tft.print(selectedQuantity);  // Show updated quantity
    } else if (key == '2' && selectedQuantity < min(availableQuantity, 2)) {
      selectedQuantity = 2;
      // Update display only if quantity changes
      tft.setCursor(20, 50);
      tft.print("Current: ");
      tft.print(selectedQuantity);  // Show updated quantity
    } else if (key == '#') {        // Confirm selection
      if (selectedQuantity > 0) {
        tft.fillScreen(BLACK);
        tft.setCursor(20, 20);
        tft.print("Confirmed qty:");
        tft.setCursor(20, 50);
        tft.print(selectedQuantity);
        delay(1000);
        return selectedQuantity;  // Return the selected quantity
      }
    } else if (key == '*') {  // Reset selection
      selectedQuantity = 0;
      // Update display for reset
      tft.setCursor(20, 50);
      tft.print("Current: ");
      tft.print(selectedQuantity);  // Show reset quantity
    }

    delay(200);  // Debounce delay
  }
}

void sendOrderDetails(String studentId, int orderCount) {
  if (client.connect(server, port)) {
    Serial.println("Connected to server");

    // Create JSON string for order details
    String jsonOrderDetails = "{\"student_id\":" + studentId + ",\"order_details\":[";
    for (int i = 0; i < orderCount; i++) {
      if (i > 0) jsonOrderDetails += ",";
      jsonOrderDetails += "{\"product_id\":" + String(orders[i].product_id) + ",\"quantity\":" + String(orders[i].quantity) + "}";
    }
    jsonOrderDetails += "]}";

    Serial.print("jsonOrderDetails: ");
    Serial.println(jsonOrderDetails);

    // Send the HTTP POST request
    client.println("POST /vm-unif/main-content/insert_order.php HTTP/1.1");
    client.println("Host: 192.168.1.22");
    client.println("Connection: close");
    client.println("Content-Type: application/json");
    client.print("Content-Length: ");
    client.println(jsonOrderDetails.length());
    client.println();
    client.println(jsonOrderDetails);

    // Wait for server response
    while (client.connected() && !client.available()) {
      delay(10);
    }

    // Read and print the response
    String response = "";
    while (client.available()) {
      response += client.readStringUntil('\n');
    }
    Serial.println("Server response:");
    Serial.println(response);

    // Close the connection
    client.stop();

    // Parse the JSON response to extract order_id
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, response);

    if (doc["status"] == "success") {
      int orderId = doc["order_id"];  // Get the order_id
      // Display the order ID on tft or print it using the thermal printer
      tft.fillScreen(BLACK);
      tft.setCursor(20, 20);
      tft.print("Order ID: ");
      tft.print(orderId);

      // You can also pass this orderId to the function that handles printing
      //printReceipt(orderId);
    } else {
      Serial.print("Error placing order: ");
      //Serial.println("Error placing order: " + String(doc["message"]));
    }
  } else {
    Serial.println("Connection failed");
  }
}

// void printReceipt(int orderId) {
//   // Initialize thermal printer and print the receipt
//   Serial.println("Printing receipt...");

//   // Print order details
//   Serial.print("Order ID: ");
//   Serial.println(orderId);
//   for (int i = 0; i < orderCount; i++) {
//     Serial.print(orders[i].prod_name);
//     Serial.print(" (");
//     Serial.print(orders[i].prod_size);
//     Serial.print(") x ");
//     Serial.println(orders[i].quantity);
//   }

//   // Example of how to print using your thermal printer (adjust commands as needed):
//   printer.begin();  // Start the thermal printer
//   printer.print("Order ID: ");
//   printer.println(orderId);
//   for (int i = 0; i < orderCount; i++) {
//     printer.print(orders[i].prod_name);
//     printer.print(" (");
//     printer.print(orders[i].prod_size);
//     printer.print(") x ");
//     printer.println(orders[i].quantity);
//   }
//   printer.println("Thank you!");
//   printer.end();
// }


String urlencode(const String& str) {
  String encoded = "";
  for (unsigned int i = 0; i < str.length(); i++) {
    char c = str.charAt(i);
    if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
      encoded += c;  // Add unencoded characters
    } else {
      encoded += String("%") + String(c, HEX);  // Encode others
    }
  }
  return encoded;
}
